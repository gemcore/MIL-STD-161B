/*============================================================================
**
** File:       rlltbl.cpp
**
** Purpose:    CCITT Group 3 Run-Length decode tables.
**
**             Note if the value identified is greater than 63 do not change 
**             colour search continue search for terminating code. Signal 
**             error if you obtain two terminating codes in sequence.
**
**
** Date:       February 1, 1991
**
** Author:     Chan Ellaurie
**             Alan D. Graves
**
** Exports:    
**
**
** Rev  Date      Id    Description
** ---  --------- ---   -----------
** 1.0  01-Feb-91 ADG   Created.
**	
**============================================================================
*/

/*
**	WHITE RUN LENGTH CODES
**	
**	wrl1 is the array for those codes that start with one
**	so drop the first one and use remaining 5 bits as index
*/ 

int wrl1[32][2]=
{
   3,    4,
   3,    4,
   3,    4,
   3,    4,
   128,  5,
   128,  5,
   8,    5,
   8,    5,
   9,    5,
   9,    5,
   16,   6,
   17,   6,
   4,    4,
   4,    4,
   4,    4,
   4,    4,
   5,    4,               
   5,    4,               
   5,    4,               
   5,    4,               
   14,   6,
   15,   6,
   64,   5,
   64,   5,
   6,    4,
   6,    4,
   6,    4,
   6,    4,
   7,    4,
   7,    4,
   7,    4,
   7,    4
};

/* 
**	wrl is the array for those codewords that start with zero.
**	drop the first zero and use remaining 8 bits as index
**	continue search for EOL if you access first four locations
*/ 

int wrl0[256][2]=
{
   0,    0,
   0,    0,
   0,    0,
   0,    0,
   29,   8,
   29,   8,
   30,   8,
   30,   8,
   45,   8,
   45,   8,
   46,   8,
   46,   8,
   22,   7,
   22,   7,
   22,   7,
   22,   7,
   23,   7,
   23,   7,
   23,   7,
   23,   7,
   47,   8,
   47,   8,
   48,   8,
   48,   8,
   13,   6,
   13,   6,
   13,   6,
   13,   6,
   13,   6,
   13,   6,
   13,   6,
   13,   6,
   20,   7,
   20,   7,
   20,   7,
   20,   7,
   33,   8,
   33,   8,
   34,   8,
   34,   8,
   35,   8,
   35,   8,
   36,   8,
   36,   8,
   37,   8,
   37,   8,
   38,   8,
   38,   8,
   19,   7,
   19,   7,
   19,   7,
   19,   7,
   31,   8,
   31,   8,
   32,   8,
   32,   8,
   1,    6,
   1,    6,
   1,    6,
   1,    6,
   1,    6,
   1,    6,
   1,    6,
   1,    6,
   12,   6,
   12,   6,
   12,   6,
   12,   6,
   12,   6,
   12,   6,
   12,   6,
   12,   6,
   53,   8,
   53,   8,
   54,   8,
   54,   8,
   26,   7,
   26,   7,
   26,   7,
   26,   7,
   39,   8,
   39,   8,
   40,   8,
   40,   8,
   41,   8,
   41,   8,
   42,   8,
   42,   8,
   43,   8,
   43,   8,
   44,   8,
   44,   8,
   21,   7,
   21,   7,
   21,   7,
   21,   7,
   28,   7,
   28,   7,
   28,   7,
   28,   7,
   61,   8,
   61,   8,
   62,   8,
   62,   8,
   63,   8,
   63,   8,
   0,    8,
   0,    8,
   320,  8,
   320,  8,
   384,  8,
   384,  8,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   10,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   11,   5,
   27,   7,
   27,   7,
   27,   7,
   27,   7,
   59,   8,
   59,   8,
   60,   8,
   60,   8,
   1472, 9,
   1536, 9,
   1600, 9,
   1728, 9,
   18,   7,
   18,   7,
   18,   7,
   18,   7,
   24,   7,
   24,   7,
   24,   7,
   24,   7,
   49,   8,
   49,   8,
   50,   8,
   50,   8,
   51,   8,
   51,   8,
   52,   8,
   52,   8,
   25,   7,
   25,   7,
   25,   7,
   25,   7,
   55,   8,
   55,   8,
   56,   8,
   56,   8,
   57,   8,
   57,   8,
   58,   8,
   58,   8,
   192,  6,
   192,  6,
   192,  6,
   192,  6,
   192,  6,
   192,  6,
   192,  6,
   192,  6,
   1664, 6,
   1664, 6,
   1664, 6,
   1664, 6,
   1664, 6,
   1664, 6,
   1664, 6,
   1664, 6,
   448,  8,
   448,  8,
   512,  8,
   512,  8,
   704,  9,
   768,  9,
   640,  8,
   640,  8,
   576,  8,
   576,  8,
   832,  9,
   896,  9,
   960,  9,
   1024, 9,
   1088, 9,
   1152, 9,
   1216, 9,
   1280, 9,
   1344, 9,
   1408, 9,
   256,  7,
   256,  7,
   256,  7,
   256,  7,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4,
   2,    4
};
                                
/*
** BLACK RUN LENGTH CODES
**	
**	if first_bit = 1
** {
**	   if next_bit == 0
**    {
**	      brl_value  = 3;
**	      brl_length = 2;
**	   }
**	   else
**    {
**	      brl_value  = 2;
**	      brl_length = 2;
**	   }
**	}
**	else
** {
**	   brl3 is for those codewords that start with less than four zeroes
**	   drop zeroes and use following 5 bits as index
** }
*/ 


int brl3[32][2]=
{
   0,    0,          
   0,    0,          
   0,    0,          
   0,    0,          
   9,    6,             
   8,    6,             
   7,    5,
   7,    5,
   6,    4,
   6,    4,
   6,    4,
   6,    4,
   5,    4,
   5,    4,
   5,    4,
   5,    4,
   1,    3,
   1,    3,
   1,    3,
   1,    3,
   1,    3,
   1,    3,
   1,    3,
   1,    3,
   4,    3,
   4,    3,
   4,    3,
   4,    3,
   4,    3,
   4,    3,
   4,    3,
   4,    3
};
                       

/* 
**	if codeword starts with 6 zeroes then use the 6 bits following first one.
*/ 

int brl6[64][2]=
{
   18,   10,
   18,   10,
   18,   10,
   18,   10,
   18,   10,
   18,   10,
   18,   10,
   18,   10,
   52,   12,
   52,   12,
   640,  13,
   704,  13,
   768,  13,
   832,  13,
   55,   12,
   55,   12,
   56,   12,
   56,   12,
   1280, 13,
   1344, 13,
   1408, 13,
   1472, 13,
   59,   12,
   59,   12,
   60,   12,
   60,   12,
   1536, 13,
   1600, 13,
   24,   11,
   24,   11,
   24,   11,
   24,   11,
   25,   11,
   25,   11,
   25,   11,
   25,   11,
   1664, 13,
   1728, 13,
   320,  12,
   320,  12,
   384,  12,
   384,  12,
   448,  12,
   448,  12,
   512,  13,
   576,  13,
   53,   12,
   53,   12,
   54,   12,
   54,   12,
   896,  13,
   960,  13,
   1024, 13,
   1088, 13,
   1152, 13,
   1216, 13,
   64,   10,
   64,   10,
   64,   10,
   64,   10,
   64,   10,
   64,   10,
   64,   10,
   64,   10
};
   
/*                       
**	If codeword starts with 5 zeroes then use the 6 bits following first one.
*/ 
                      
int brl5[64][2]=
{
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   13,   8,
   23,   11,
   23,   11,
   50,   12,
   51,   12,
   44,   12,
   45,   12,
   46,   12,
   47,   12,
   57,   12,
   58,   12,
   61,   12,
   256,  12,
   16,   10,
   16,   10,
   16,   10,
   16,   10,
   17,   10,
   17,   10,
   17,   10,
   17,   10,
   48,   12,
   49,   12,
   62,   12,
   63,   12,
   30,   12,
   31,   12,
   32,   12,
   33,   12,
   40,   12,
   41,   12,
   22,   11,
   22,   11,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8,
   14,   8
};
                     

/*
** If codeword starts with 4 zeroes then use the 7 bits following first one.
*/

int brl4[128][2]=
{
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   10,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   11,   7,
   15,   9,
   15,   9,
   15,   9,
   15,   9,
   15,   9,
   15,   9,
   15,   9,
   15,   9,
   128,  12,
   192,  12,
   26,   12,
   27,   12,
   28,   12,
   29,   12,
   19,   11,
   19,   11,
   20,   11,
   20,   11,
   34,   12,
   35,   12,
   36,   12,
   37,   12,
   38,   12,
   39,   12,
   21,   11,
   21,   11,
   42,   12,
   43,   12,
   0,    10,
   0,    10,
   0,    10,
   0,    10,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7,
   12,   7
};
                    

